/*                                                -*-buffer-read-only: t-*-
 * **********************************************************
 * Copyright 2004 VMware, Inc.  All rights reserved. -- VMware Confidential
 * **********************************************************
 */

/*
 * uwvmkDispatch.h --
 *
 * AUTOMATICALLY GENERATED FILE.  HAND EDITS WILL BE LOST!
 *
 * Generated by  : bora/support/scripts/syscallGen.pl (via support/scripts/uwvmkGen)
 * Generated from: bora/vmkernel/user/uwvmkSyscall.list
 */

#ifndef UWVMKSYSCALL_GENERATED_UWVMKDISPATCH_H
#define UWVMKSYSCALL_GENERATED_UWVMKDISPATCH_H

#define INCLUDE_ALLOW_VMKERNEL
#include "includeCheck.h"

#include "vm_basic_types.h"
#include "vmkernel.h"
#include "world.h"
#include "vscsi.h"
#include "cow.h"
#include "return_status.h"
#include "user_int.h"

#define UWVMKSYSCALL_CHECKSUM 0x8117266a

/*
 * UWVMKSyscall syscall numbers.
 */
typedef enum {
    UWVMKSYSCALL_SYSCALLNUM_GetSyscallVersion               = 0,
    UWVMKSYSCALL_SYSCALLNUM_LockPage                        = 1,
    UWVMKSYSCALL_SYSCALLNUM_ProbeMPN                        = 2,
    UWVMKSYSCALL_SYSCALLNUM_GetNextAnonPage                 = 3,
    UWVMKSYSCALL_SYSCALLNUM_ReadVMKStack                    = 4,
    UWVMKSYSCALL_SYSCALLNUM_GetMPNContents                  = 5,
    UWVMKSYSCALL_SYSCALLNUM_SetMPNContents                  = 6,
    UWVMKSYSCALL_SYSCALLNUM_BreakIntoDebugger               = 7,
    UWVMKSYSCALL_SYSCALLNUM_LiveCoreDump                    = 8,
    UWVMKSYSCALL_SYSCALLNUM_RPCConnect                      = 9,
    UWVMKSYSCALL_SYSCALLNUM_RPCGetMsg                       = 10,
    UWVMKSYSCALL_SYSCALLNUM_RPCSendMsg                      = 11,
    UWVMKSYSCALL_SYSCALLNUM_RPCReply                        = 12,
    UWVMKSYSCALL_SYSCALLNUM_CreateVCPU                      = 13,
    UWVMKSYSCALL_SYSCALLNUM_BindVCPU                        = 14,
    UWVMKSYSCALL_SYSCALLNUM_ReleaseAllVCPUs                 = 15,
    UWVMKSYSCALL_SYSCALLNUM_GetCPUkhzEstimate               = 16,
    UWVMKSYSCALL_SYSCALLNUM_GetNumCPUsUsed                  = 17,
    UWVMKSYSCALL_SYSCALLNUM_GetNumLogicalCPUsPerPackage     = 18,
    UWVMKSYSCALL_SYSCALLNUM_GetCPUIDs                       = 19,
    UWVMKSYSCALL_SYSCALLNUM_SetVMXInfo                      = 20,
    UWVMKSYSCALL_SYSCALLNUM_SetUID                          = 21,
    UWVMKSYSCALL_SYSCALLNUM_SetupPhysMemMap                 = 22,
    UWVMKSYSCALL_SYSCALLNUM_ReleasePhysMemMap               = 23,
    UWVMKSYSCALL_SYSCALLNUM_MemTestMap                      = 24,
    UWVMKSYSCALL_SYSCALLNUM_AsyncCheckActions               = 25,
    UWVMKSYSCALL_SYSCALLNUM_AddPage                         = 26,
    UWVMKSYSCALL_SYSCALLNUM_ReadPage                        = 27,
    UWVMKSYSCALL_SYSCALLNUM_ReadRegs                        = 28,
    UWVMKSYSCALL_SYSCALLNUM_RunWorld                        = 29,
    UWVMKSYSCALL_SYSCALLNUM_NetConnect                      = 30,
    UWVMKSYSCALL_SYSCALLNUM_NetDisconnect                   = 31,
    UWVMKSYSCALL_SYSCALLNUM_UsingVMKTcpIpStack              = 32,
    UWVMKSYSCALL_SYSCALLNUM_DelaySCSICmds                   = 33,
    UWVMKSYSCALL_SYSCALLNUM_PhysMemIO                       = 34,
    UWVMKSYSCALL_SYSCALLNUM_VSCSICreateDev                  = 35,
    UWVMKSYSCALL_SYSCALLNUM_VSCSIDestroyDev                 = 36,
    UWVMKSYSCALL_SYSCALLNUM_OpenCowHierarchy                = 37,
    UWVMKSYSCALL_SYSCALLNUM_CowCombine                      = 38,
    UWVMKSYSCALL_SYSCALLNUM_MarkCheckpoint                  = 39,
    UWVMKSYSCALL_SYSCALLNUM_CheckpointCleanup               = 40,
    UWVMKSYSCALL_SYSCALLNUM_SaveMemory                      = 41,
    UWVMKSYSCALL_SYSCALLNUM_MigrateWriteCptData             = 42,
    UWVMKSYSCALL_SYSCALLNUM_MigratePollForData              = 43,
    UWVMKSYSCALL_SYSCALLNUM_MigrateReadCptData              = 44,
    UWVMKSYSCALL_SYSCALLNUM_InitMigration                   = 45,
    UWVMKSYSCALL_SYSCALLNUM_Inb                             = 46,
    UWVMKSYSCALL_SYSCALLNUM_Outb                            = 47,
    UWVMKSYSCALL_SYSCALLNUM_SysAlert                        = 48,
    UWVMKSYSCALL_SYSCALLNUM_IsCosPidAlive                   = 49,
    UWVMKSYSCALL_SYSCALLNUM_GetCosProxyPid                  = 50,
    UWVMKSYSCALL_SYSCALLNUM_MAX                             = 51,
} UWVMKSyscall_Number;




typedef void (*UWVMKSyscall_Handler)(VMKFullUserExcFrame * const);


/*
 * UWVMKSyscall_GetHandler --
 *     Find the handler for a given raw syscall number.  Return given
 *     default handler if rawNr is out of bounds.
 *
 * Results:
 *     A syscall handler or given default handler
 *
 * Side-effects:
 *     None.
 *
 */
static INLINE UWVMKSyscall_Handler
UWVMKSyscall_GetHandler(unsigned rawNr, UWVMKSyscall_Handler def) {
    extern unsigned int UWVMKSyscall_HandlerTableLen;
    extern UWVMKSyscall_Handler UWVMKSyscall_HandlerTable[];
    return (rawNr < UWVMKSyscall_HandlerTableLen) ? (UWVMKSyscall_HandlerTable[rawNr]) : def;
}


/*
 * UWVMKSyscall_GetName --
 *     Find the name for a given raw syscall number.
 *
 * Results:
 *     A string or NULL
 *
 * Side-effects:
 *     None.
 *
 */
static INLINE const char*
UWVMKSyscall_GetName(unsigned rawNr) {
    extern const char* UWVMKSyscall_NameTable[];
    extern unsigned int UWVMKSyscall_NameTableLen;
    return (rawNr < UWVMKSyscall_NameTableLen) ? (UWVMKSyscall_NameTable[rawNr]) : NULL;
}


extern VMK_ReturnStatus UWVMKSyscall_GetSyscallVersion(uint32* version);
extern VMK_ReturnStatus UWVMKSyscall_LockPage(VPN userVPN,
                                              MPN* outMPN);
extern VMK_ReturnStatus UWVMKSyscall_ProbeMPN(VPN userVPN,
                                              MPN* outMPN);
extern VMK_ReturnStatus UWVMKSyscall_GetNextAnonPage(World_ID worldID,
                                                     MPN inMPN,
                                                     MPN* outMPN);
extern VMK_ReturnStatus UWVMKSyscall_ReadVMKStack(World_ID worldId,
                                                  int pageNum,
                                                  UserVA /* uint8* */ data,
                                                  VA* vaddr);
extern VMK_ReturnStatus UWVMKSyscall_GetMPNContents(MPN mpn,
                                                    UserVA /* uint8* */ buf);
extern VMK_ReturnStatus UWVMKSyscall_SetMPNContents(MPN mpn,
                                                    UserVA /* const uint8* */ buf);
extern VMK_ReturnStatus UWVMKSyscall_BreakIntoDebugger(UserVA /* void* */ fullFrame);
extern VMK_ReturnStatus UWVMKSyscall_LiveCoreDump(UserVA /* char * */ coreFileName,
                                                  int coreFileNameLen);
extern VMK_ReturnStatus UWVMKSyscall_RPCConnect(const char * name,
                                                int * cnxFD,
                                                int32 * cnxID);
extern VMK_ReturnStatus UWVMKSyscall_RPCGetMsg(int32 cnxFD,
                                               UserVA /* RPC_MsgInfo * */ msgInfo,
                                               uint32 timeout,
                                               int32 isBlocking,
                                               World_ID switchToWorldID);
extern VMK_ReturnStatus UWVMKSyscall_RPCSendMsg(int32 cnxFD,
                                                int32 rpcFunction,
                                                UserVA /* char * */ msgBuf,
                                                int32 msgBufLen);
extern VMK_ReturnStatus UWVMKSyscall_RPCReply(int32 cnxFD,
                                              int32 token);
extern VMK_ReturnStatus UWVMKSyscall_CreateVCPU(VMnix_CreateWorldArgs * args,
                                                SharedAreaDesc * desc,
                                                World_ID * worldID);
extern VMK_ReturnStatus UWVMKSyscall_BindVCPU(World_ID groupLeaderID,
                                              int32 vcpuID,
                                              World_ID * worldID);
extern VMK_ReturnStatus UWVMKSyscall_ReleaseAllVCPUs(void);
extern VMK_ReturnStatus UWVMKSyscall_GetCPUkhzEstimate(uint32 * cpukHzEstimate);
extern VMK_ReturnStatus UWVMKSyscall_GetNumCPUsUsed(uint32 * numCPUs);
extern VMK_ReturnStatus UWVMKSyscall_GetNumLogicalCPUsPerPackage(uint8 * numCPUs);
extern VMK_ReturnStatus UWVMKSyscall_GetCPUIDs(UserVA /* CPUIDSummary * */ cpuIDs,
                                               uint32 bufLen);
extern VMK_ReturnStatus UWVMKSyscall_SetVMXInfo(const char * cfgPath,
                                                const char * uuidString,
                                                const char * displayName);
extern VMK_ReturnStatus UWVMKSyscall_SetUID(void);
extern VMK_ReturnStatus UWVMKSyscall_SetupPhysMemMap(PPN startPPN,
                                                     uint32 length,
                                                     UserVA /* void ** */ addr);
extern VMK_ReturnStatus UWVMKSyscall_ReleasePhysMemMap(UserVA /* void* */ vaddr,
                                                       uint32 length);
extern VMK_ReturnStatus UWVMKSyscall_MemTestMap(UserVA /* MPN * */ inOutMPN,
                                                UserVA /* uint32 * */ numPages,
                                                UserVA /* void ** */ addr);
extern VMK_ReturnStatus UWVMKSyscall_AsyncCheckActions(World_ID worldID);
extern VMK_ReturnStatus UWVMKSyscall_AddPage(int32 vcpuID,
                                             VPN vpn,
                                             MPN mpn,
                                             int32 readOnly);
extern VMK_ReturnStatus UWVMKSyscall_ReadPage(World_ID worldID,
                                              VPN vpn,
                                              UserVA /* uint8* */ data);
extern VMK_ReturnStatus UWVMKSyscall_ReadRegs(World_ID worldID,
                                              VMnix_ReadRegsResult* result);
extern VMK_ReturnStatus UWVMKSyscall_RunWorld(World_ID worldID,
                                              VMnix_Entry start);
extern VMK_ReturnStatus UWVMKSyscall_NetConnect(World_ID worldID,
                                                const char * name,
                                                Net_PortID * portID);
extern VMK_ReturnStatus UWVMKSyscall_NetDisconnect(World_ID worldID,
                                                   Net_PortID portID);
extern VMK_ReturnStatus UWVMKSyscall_UsingVMKTcpIpStack(void);
extern VMK_ReturnStatus UWVMKSyscall_DelaySCSICmds(uint32 delay);
extern VMK_ReturnStatus UWVMKSyscall_PhysMemIO(int fd,
                                               uint32 offsetHi,
                                               uint32 offsetLo,
                                               int startPercent,
                                               int endPercent,
                                               Bool isRead);
extern VMK_ReturnStatus UWVMKSyscall_MarkCheckpoint(Bool wakeup,
                                                    Bool start);
extern VMK_ReturnStatus UWVMKSyscall_CheckpointCleanup(void);
extern VMK_ReturnStatus UWVMKSyscall_SaveMemory(void);
extern VMK_ReturnStatus UWVMKSyscall_MigrateWriteCptData(int offset,
                                                         UserVA /* void * */ data,
                                                         int size,
                                                         Bool completed);
extern VMK_ReturnStatus UWVMKSyscall_MigratePollForData(UserVA /* VMnix_MigrateProgressResult * */ progress);
extern VMK_ReturnStatus UWVMKSyscall_MigrateReadCptData(int offset,
                                                        UserVA /* void * */ dest,
                                                        int size,
                                                        int * sizeOut);
extern VMK_ReturnStatus UWVMKSyscall_InitMigration(uint32 tsHi,
                                                   uint32 tsLo,
                                                   uint32 srcIpAddr,
                                                   uint32 destIpAddr,
                                                   World_ID destWorldID,
                                                   Bool grabResources);
extern VMK_ReturnStatus UWVMKSyscall_Inb(uint32 port,
                                         uint8 * value);
extern VMK_ReturnStatus UWVMKSyscall_Outb(uint32 port,
                                          uint8 value);
extern VMK_ReturnStatus UWVMKSyscall_SysAlert(const char * msg);
extern VMK_ReturnStatus UWVMKSyscall_IsCosPidAlive(int cosPid);
extern VMK_ReturnStatus UWVMKSyscall_GetCosProxyPid(int * cosPid);
#endif /* UWVMKSYSCALL_GENERATED_UWVMKDISPATCH_H */
